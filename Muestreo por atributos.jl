### A Pluto.jl notebook ###
# v0.19.16

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ‚ïî‚ïê‚ï° e940f120-fbe8-481b-ba90-17d5af80fa07
begin
    import Pkg
    # activate the shared project environment
    Pkg.activate("/Users/javier/.julia/dev/AcceptanceSampling")
    # instantiate, i.e. make sure that all packages are downloaded
    Pkg.instantiate()

    using Plots, AcceptanceSampling, PlutoUI, Kroki, Combinatorics, Distributions, PlutoTeachingTools, CommonMark
end

# ‚ïî‚ïê‚ï° a5587c32-709e-11ed-3047-b79d7fc586b9
md"""
# Muestreo de aceptaci√≥n por atributos

## Esquema

1. Necesidad del muestreo de aceptaci√≥n
2. Creaci√≥n de un plan de muestreo
3. Obtenci√≥n de la curva caracter√≠stica de operaci√≥n
   1. Funci√≥n hipergeom√©trica
   2. Funci√≥n Binomial
   3. Funci√≥n de Poisson
   4. Relaci√≥n entre las tres funciones de distribuci√≥n
4. Riesgo de comprador y del productor
5. Selecci√≥n de un plan de muestreo por atributos
6. Planes de muestreo doble
"""

# ‚ïî‚ïê‚ï° cd5cf515-29c9-43e5-a08e-5a3334815c3c
cm"""
## Necesidad del muestreo de aceptaci√≥n

El muestreo es necesario porque tenemos que tomar decisiones a partir de informaci√≥n incompleta. Nos encontramos con un lote con un tama√±o _N_ y queremos ver si su nivel de calidad es aceptable, ya sea porque somos productores y deseamos saber si es adecuado para poderlo enviar al cliente o porque estamos comprando el lote y tenemos que asegurarnos que el nivel de calidad es el que hemos pactado con el proveedor.

$(aside(tip(md"``N``: Tama√±o el lote")))



"""

# ‚ïî‚ïê‚ï° d88d73c0-bcb3-4b2b-a7df-57ca598dff48
cm"""
El nivel de calidad ser√° la fracci√≥n de unidades no conformes del lote, es decir, el tanto por uno (o porcentaje) de unidades defectuosas del lote. Por ejemplo, un lote con un nivel de calidad de un 2 % o de 0.02. Se calcula as√≠:

```math
p = \frac{\text{N√∫m. de defectos del lote}}{N}
```

$(aside(tip(md"``p``: Fracci√≥n de unidades no conformes del lote")))

El problema radica en que no podemos conocer el n√∫mero total de unidades disconformes del lote sin inspeccionar todas las unidades, lo que no siempre es posible por motivos econ√≥micos, de tiempo o porque el an√°lisis es destructivo.
"""

# ‚ïî‚ïê‚ï° 2779ed47-513e-4715-8d9e-754d3fee3df3
cm"""
Para poder comprobar si el lote es aceptable, ser√° necesario aplicar un **plan de muestreo**. El plan de muestreo consistira en tomar una muestra de tama√±o ``n``. Esta muestra debe ser:
* Representativa
* Aleatoria
* Libre de errores sistem√°ticos

$(aside(tip(md"``n``: Tama√±o de muestra")))

Adem√°s se debe elegir un _criterio de aceptaci√≥n_ para decidir si el lote es aceptable o no.

Al elegir un plan de muestreo hay que especificar el tama√±o de muestra y el criterio de selecci√≥n.
"""

# ‚ïî‚ïê‚ï° 4d7f301d-bb49-4526-b76d-10c2b7ce7ee4
cm"""
El n√∫mero de unidades defectuosas que encontramos en la muestra lo denominamos ``d``. Si el tama√±o de muestra es suficientemente elevado, ``\frac{d}{n}`` deber√≠a alcanzar el valor de ``p``.

$(aside(tip(md"``d``: N√∫mero de unidades no conformes de la muestra.")))
"""

# ‚ïî‚ïê‚ï° bd53f4d6-0852-4d29-98a9-2005e42d4692
# Ejemplo intro
md"""
---
!!! note "Ejemplo: ¬øD√≥nde est√°n las unidades no conformes?"
	
_N_ = $(@bind N_intro Slider(100:1:500, default=150, show_value=true)) | N√∫m. de unidades no conformes = $(@bind d_intro Slider(0:60, show_value=true))

_n_ = $(@bind n_intro Slider(100:1:500, default=150, show_value=true))

Mostrar $(@bind mostrar_intro Select(["lote", "muestra", "unidades defectuosas"]))
"""

# ‚ïî‚ïê‚ï° 082e6af1-0db1-40c6-9447-d44daea34c61
begin
	function reemplaza(string, posiciones, emoticono)
		array = collect(string)
		for i in posiciones
			array[i] = emoticono
		end
		join(array)
	end
	
	lote_intro = crear_lote(d_intro, N_intro)
	muest_intro = hacer_muestreo(n_intro, lote_intro, false)
	base_intro = "ü•´"^N_intro
	defect_intro = reemplaza(base_intro, lote_intro.nc_pos, 'üí©')
	muestras_intro = reemplaza(base_intro, muest_intro.muestra_pos, 'üß™')
	p_intro = d_intro/N_intro

	if mostrar_intro == "lote"
		show_intro = base_intro
	elseif mostrar_intro == "muestra"
		show_intro = muestras_intro
	elseif mostrar_intro == "unidades defectuosas"
		show_intro = defect_intro
	else
		show_intro = "Error al mostrar el lote. Fallo en el 'Select'"
	end
	
	cm"""
	 $(show_intro)

	 ``p`` = $(round(p_intro; digits=3)) | ``d/n``= $(round(muest_intro.d/n_intro; digits=3))
	
	---
	"""
end

# ‚ïî‚ïê‚ï° c906f8a9-1752-443c-a157-223456258ce9
cm"""
Idealmente ``p`` y ``d/n`` deber√≠an ser iguales, pero comprobamos que no siempre es as√≠. Solamente ocurre cuanto el tama√±o de muestra es muy elevado. El problema es que un tama√±o de muestra muy elevado, los costes debidos al muestreo se hacen muy altos.

Es necesario que estudiemos el problema con m√°s detalle para encontrar un valor de ``n`` que nos permita unos resultados con unas garant√≠as aceptables pero que no disparen los costes.
"""

# ‚ïî‚ïê‚ï° 48265e3f-071c-4813-ba18-a67ff1e3eb38
cm"""
## Creaci√≥n del plan de muestreo

Como hemos visto un plan de muestreo consta de:

* ``n``, el tama√±o de muestra, y,
* ``c``, el criterio de aceptaci√≥n, que es el n√∫mero m√°ximo aceptable de unidades no conformes en la muestra.

El lote ser√° aceptable si ``d \le c``.

Veamos un ejemplo de apliaci√≥n del muestreo:

---
!!! note "Ejemplo de la apliaci√≥n de un plan de muestreo"

Seleccionar las caracter√≠sticas del lote y del plan de muestreo. Al modificar cualquiera de los valores, se realiza la simulaci√≥n. Para repetirla sin cambiar los valores, solo hay que pulsarl el bot√≥n "Repetir la simulaci√≥n".
"""

# ‚ïî‚ïê‚ï° 57fbc946-c6c9-4a89-87ab-067f6bbea4e6
# Ejemplo: apl
md"""
**Caracter√≠sticas del lote:**

_N_ = $(@bind N_apl Slider(100:1000, show_value=true, default=500)) | 
_p_ = $(@bind p_apl Slider(0.:.001:0.2, show_value=true, default=0.01))

**Muestra:**

_n_ = $(@bind n_apl Slider(0:1000, show_value=true, default=100)) | _c_ = $(@bind c_apl Slider(0:30, show_value=true, default=0))

$(@bind go_apl Button("Repetir al simulaci√≥n"))
"""

# ‚ïî‚ïê‚ï° 0295d3b5-0808-4442-969a-71b02ffbc777
begin
	go_apl
	
	plan_apl = Plan(n_apl, c_apl, false)
	md"""
	Se **$(simul_muestreo(plan_apl, Int(floor(p_apl*N_apl)), N_apl, 1) == 1 ? "acepta" : "rechaza")** el lote.
	
	---
	"""
end

# ‚ïî‚ïê‚ï° 24bffeb8-8ddf-44ab-ae2b-09a7c9782bbd
md"""
Comprobamos hay situaciones en las que pr√°cticamente siempre se acepta el lote. Esto se produce cuando:
1. El nivel de calidad es muy bueno, es decir, valores de fracci√≥n de unidades no conformes $p$ bajos, es decir, pocas unidades no conformes en el lote
2. Planes de muestreo poco exigentes, ya sea porque el tama√±o de muestra $n$ bajos o por criterios de aceptaci√≥n $c$ demasiado elevados.

Tambi√©n tenemos la situaci√≥n contraria, en la que los lotes se rechazan pr√°cticamente todas las veces. Viendo los casos en los que domina la aceptaci√≥n, es sencillo entender cuando se da la situaci√≥n contraria.

Existen situaciones intermedias en los que la aceptaci√≥n y el rechazo se da en un n√∫mero simular.

El resultado es que tenemos una incertidumbre cuando se realiza un muestreo. Es inevitable ya que estamos trabajando con informaci√≥n incompleta. Debemos estudiar mejor este problema para poder encontrar una soluci√≥n satisfactoria.

---
!!! note "Ejemplo: Muchos muestreos"

En este caso, en lugar de realizar un solo muestreo vamos a realizar varios muestreos de un mismo lote y contaremos cuantas veces se acepta el lote.
"""

# ‚ïî‚ïê‚ï° 9f95f89a-0f3d-445d-8991-f69961fca35f
# Ejemplo: simul
md"""
**Caracter√≠sticas del lote:**

_N_ = $(@bind N_simul Slider(100:1000, show_value=true, default=800)) | 
_p_ = $(@bind p_simul Slider(0.:.001:0.2, show_value=true, default=0.016))

**Muestra:**

_n_ = $(@bind n_simul Slider(0:1000, show_value=true, default=100)) | _c_ = $(@bind c_simul Slider(0:30, show_value=true, default=1))

N√∫mero de simulaciones: $(@bind num_simul Select([1, 10, 100, 1000, 10_000, 100_000], default=100)) | $(@bind go_simul Button("Repetir"))

**Resultado de la simulaci√≥n:**
"""

# ‚ïî‚ïê‚ï° 56b21ea7-d015-4f5b-91ed-b8db6bc1b271
begin
	go_simul
	
	
	plan_simul = Plan(n_simul, c_simul, false)
	acep_simul = Int(round(simul_muestreo(plan_simul, Int(floor(p_simul*N_simul)), N_simul, num_simul)*num_simul))
	md"""
	Se aceptan | Se rechazan | Total
	:---------:|:-----------:|:------:
	$acep_simul|$(num_simul-acep_simul) | $num_simul

	---
	"""
end

# ‚ïî‚ïê‚ï° 5a43c763-d972-41e2-8f5a-161c15b3587b
cm"""
Podemos calcular la probabilidad de aceptar un lote ``P_a`` a partir de los datos anteriores:
	
```math
P_a = \frac{\text{N√∫m. de lotes aceptados}}{\text{N√∫mero total de lotes muestreados}}
```
$(aside(tip(md"``P_a``: Probabilidad de aceptar un lote con un nivel de calidad ``p``.")))

Para la simulaci√≥n anterior, encontramos que:

``P_a`` = $(acep_simul)/$num_simul = $(round(acep_simul/num_simul;digits=3))
"""


# ‚ïî‚ïê‚ï° df6efd4c-764a-4955-a74b-e482ec4ce79f
md"""
## Obtenci√≥n de la curva caracter√≠stica de operaci√≥n

La probabilidad de aceptaci√≥n nos permite saber si un lote con un cierto nivel de calidad ser√° m√°s probable que sea rechazado o aceptado. Idealmente deseamos que los lotes con un nivel de calidad adecuado se acepten siempre y si el nivel de calidad del lote es peor que el objetivo de calidad, se rechacen.

Podemos representar de manera gr√°fica el razonamiento anterior representando $P_a$ en funci√≥n de $p$. Esta gr√°fica se denomina **curva caracter√≠stica de operaci√≥n**.
"""

# ‚ïî‚ïê‚ï° cc70fc39-6884-485a-b1c5-c73445d05f39
md"""
Si el tamano de muestra coincide con el tama√±o del lote no existe incertidumbre, ya que inspeccionamos todas las unidades del lote, se conoce el nivel de calidad sin margen de duda. Esta curva caracter√≠stica es la curva caracter√≠stica ideal.

$(aside(tip(md"Se puede comprobar esta afirmaci√≥n f√°cilmente con la simulaci√≥n anterior.")))
---
!!! note "Curva caracter√≠stica de operaci√≥n ideal"
"""

# ‚ïî‚ïê‚ï° 1e3e1c9f-cd6a-403c-b5fc-c64a4bd50e6b
# ejemplo: ideal
md"""
Nivel de calidad aceptable (NCA) = $(@bind p_ideal Slider(0:.1:1, show_value=true, default=0.5))
"""

# ‚ïî‚ïê‚ï° e2761ee8-6430-4d67-9e88-6f344f39a509
begin
	lims_ideal = [0, 1, p_ideal]
	lims_text_ideal = [0, 1, "NCA"]
	plot(0:.001:1, x->(x <= p_ideal ? 1 : 0), ylabel="P‚Çê", xlabel="p", legend=false,
	lw=4, fill=0, fillalpha=.2, xticks=(lims_ideal, lims_text_ideal))
	annotate!(p_ideal/2, 0.5, "Aceptaci√≥n")
	annotate!(p_ideal+(1-p_ideal)/2, 0.5, "Rechazo")
end

# ‚ïî‚ïê‚ï° 1417443b-5b5c-477d-ba65-e5a3dc4f6811
md"""
---
Podemos dibujar la curva caracter√≠stica de operaci√≥n para un plan de muestreo utilizando las simulaciones que hemos planteado m√°s arriba. Tendremos que repetir las simulaciones para todos los valores de _p_ que queramos representar.

---
!!! note "Curva caracter√≠stica de operaci√≥n mediante simulaciones"
"""

# ‚ïî‚ïê‚ï° bed5a7a3-1742-48b4-86a1-44e1b4216839
# ejemplo:OCsim
md"""
**Caracter√≠sticas del lote:**

_N_ = $(@bind N_OCsim Slider(100:1000, show_value=true, default=800)) | 
_p m√°x_ = $(@bind p_OCsim Slider(0.:.001:0.2, show_value=true, default=0.016))

**Muestra:**

_n_ = $(@bind n_OCsim Slider(0:1000, show_value=true, default=100)) | _c_ = $(@bind c_OCsim Slider(0:30, show_value=true, default=1))

N√∫mero de simulaciones: $(@bind num_OCsim Select([1, 10, 100, 1000, 10_000, 100_000], default=100)) | $(@bind go_OCsim Button("Repetir"))

**Resultado de la simulaci√≥n:**
"""

# ‚ïî‚ïê‚ï° 9da34e6b-b895-4e95-9dfd-506e0781e00a
begin
	go_OCsim
	
	plan_OCsim = Plan(n_OCsim, c_OCsim, false)
	np_OCsim = 0:Int(round(p_OCsim*N_OCsim))
	oc_OCsim = crear_oc(plan_OCsim, np_OCsim, N_OCsim, num_OCsim)
	scatter(oc_OCsim.p, oc_OCsim.Pa, legend=false, xlabel="p", ylabel="P‚Çê")
end

# ‚ïî‚ïê‚ï° d1a20e83-954a-4a7c-ba22-223d0ed3a0da
md"""
---
Hemos calculado la curva caracter√≠stica de operaci√≥n "experimentalmente". El problema es que hemos necesitado $(num_OCsim*length(np_OCsim)) simulaciones para poder obtenerla.

Este m√©todo funciona, pero  tiene que haber una manera m√°s sencilla de obtener los datos de probabilidad de aceptaci√≥n sin tener que realizar tantos c√°lculos.
"""

# ‚ïî‚ïê‚ï° f8ab6471-7a20-4360-a306-a1c9b236751b
md"""
## Curvas OC a partir de las funciones de distribuci√≥n
"""

# ‚ïî‚ïê‚ï° 5ad473e8-e5e2-4c0a-b4a3-3f98cfabeeef


# ‚ïî‚ïê‚ï° 9da2825d-66ff-4768-b3b0-1c865f53ba06
md"""
---
---
"""

# ‚ïî‚ïê‚ï° 10a95832-912a-4b4e-b165-41efd7cd6e61
PlutoUI.TableOfContents()

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄa5587c32-709e-11ed-3047-b79d7fc586b9
# ‚ïü‚îÄcd5cf515-29c9-43e5-a08e-5a3334815c3c
# ‚ïü‚îÄd88d73c0-bcb3-4b2b-a7df-57ca598dff48
# ‚ïü‚îÄ2779ed47-513e-4715-8d9e-754d3fee3df3
# ‚ïü‚îÄ4d7f301d-bb49-4526-b76d-10c2b7ce7ee4
# ‚ïü‚îÄbd53f4d6-0852-4d29-98a9-2005e42d4692
# ‚ïü‚îÄ082e6af1-0db1-40c6-9447-d44daea34c61
# ‚ïü‚îÄc906f8a9-1752-443c-a157-223456258ce9
# ‚ïü‚îÄ48265e3f-071c-4813-ba18-a67ff1e3eb38
# ‚ïü‚îÄ57fbc946-c6c9-4a89-87ab-067f6bbea4e6
# ‚ïü‚îÄ0295d3b5-0808-4442-969a-71b02ffbc777
# ‚ïü‚îÄ24bffeb8-8ddf-44ab-ae2b-09a7c9782bbd
# ‚ïü‚îÄ9f95f89a-0f3d-445d-8991-f69961fca35f
# ‚ïü‚îÄ56b21ea7-d015-4f5b-91ed-b8db6bc1b271
# ‚ïü‚îÄ5a43c763-d972-41e2-8f5a-161c15b3587b
# ‚ïü‚îÄdf6efd4c-764a-4955-a74b-e482ec4ce79f
# ‚ïü‚îÄcc70fc39-6884-485a-b1c5-c73445d05f39
# ‚ïü‚îÄ1e3e1c9f-cd6a-403c-b5fc-c64a4bd50e6b
# ‚ïü‚îÄe2761ee8-6430-4d67-9e88-6f344f39a509
# ‚ïü‚îÄ1417443b-5b5c-477d-ba65-e5a3dc4f6811
# ‚ïü‚îÄbed5a7a3-1742-48b4-86a1-44e1b4216839
# ‚ïü‚îÄ9da34e6b-b895-4e95-9dfd-506e0781e00a
# ‚ïü‚îÄd1a20e83-954a-4a7c-ba22-223d0ed3a0da
# ‚ïü‚îÄf8ab6471-7a20-4360-a306-a1c9b236751b
# ‚ï†‚ïê5ad473e8-e5e2-4c0a-b4a3-3f98cfabeeef
# ‚ïü‚îÄ9da2825d-66ff-4768-b3b0-1c865f53ba06
# ‚ï†‚ïêe940f120-fbe8-481b-ba90-17d5af80fa07
# ‚ï†‚ïê10a95832-912a-4b4e-b165-41efd7cd6e61
