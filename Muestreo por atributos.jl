### A Pluto.jl notebook ###
# v0.19.16

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ‚ïî‚ïê‚ï° e940f120-fbe8-481b-ba90-17d5af80fa07
begin
    import Pkg
    # activate the shared project environment
    Pkg.activate("/Users/javier/.julia/dev/AcceptanceSampling")
    # instantiate, i.e. make sure that all packages are downloaded
    Pkg.instantiate()

    using Plots, AcceptanceSampling, PlutoUI, Kroki, Combinatorics, Distributions, PlutoTeachingTools, CommonMark
end

# ‚ïî‚ïê‚ï° a5587c32-709e-11ed-3047-b79d7fc586b9
md"""
# Muestreo de aceptaci√≥n por atributos

## Esquema

1. Necesidad del muestreo de aceptaci√≥n
2. Creaci√≥n de un plan de muestreo
3. Obtenci√≥n de la curva caracter√≠stica de operaci√≥n
   1. Funci√≥n hipergeom√©trica
   2. Funci√≥n Binomial
   3. Funci√≥n de Poisson
   4. Relaci√≥n entre las tres funciones de distribuci√≥n
4. Riesgo de comprador y del productor
5. Selecci√≥n de un plan de muestreo por atributos
6. Planes de muestreo doble
"""

# ‚ïî‚ïê‚ï° cd5cf515-29c9-43e5-a08e-5a3334815c3c
cm"""
## Necesidad del muestreo de aceptaci√≥n

El muestreo es necesario porque tenemos que tomar decisiones a partir de informaci√≥n incompleta. Nos encontramos con un lote con un tama√±o _N_ y queremos ver si su nivel de calidad es aceptable, ya sea porque somos productores y deseamos saber si es adecuado para poderlo enviar al cliente o porque estamos comprando el lote y tenemos que asegurarnos que el nivel de calidad es el que hemos pactado con el proveedor.

$(aside(tip(md"``N``: Tama√±o el lote")))



"""

# ‚ïî‚ïê‚ï° d88d73c0-bcb3-4b2b-a7df-57ca598dff48
cm"""
El nivel de calidad ser√° la fracci√≥n de unidades no conformes del lote, es decir, el tanto por uno (o porcentaje) de unidades defectuosas del lote. Por ejemplo, un lote con un nivel de calidad de un 2 % o de 0.02. Se calcula as√≠:

```math
p = \frac{\text{N√∫m. de defectos del lote}}{N}
```

$(aside(tip(md"``p``: Fracci√≥n de unidades no conformes del lote")))

El problema radica en que no podemos conocer el n√∫mero total de unidades disconformes del lote sin inspeccionar todas las unidades, lo que no siempre es posible por motivos econ√≥micos, de tiempo o porque el an√°lisis es destructivo.
"""

# ‚ïî‚ïê‚ï° 2779ed47-513e-4715-8d9e-754d3fee3df3
cm"""
Para poder comprobar si el lote es aceptable, ser√° necesario aplicar un **plan de muestreo**. El plan de muestreo consistira en tomar una muestra de tama√±o ``n``. Esta muestra debe ser:
* Representativa
* Aleatoria
* Libre de errores sistem√°ticos

$(aside(tip(md"``n``: Tama√±o de muestra")))

Adem√°s se debe elegir un _criterio de aceptaci√≥n_ para decidir si el lote es aceptable o no.

Al elegir un plan de muestreo hay que especificar el tama√±o de muestra y el criterio de selecci√≥n.
"""

# ‚ïî‚ïê‚ï° 4d7f301d-bb49-4526-b76d-10c2b7ce7ee4
cm"""
El n√∫mero de unidades defectuosas que encontramos en la muestra lo denominamos ``d``. Si el tama√±o de muestra es suficientemente elevado, ``\frac{d}{n}`` deber√≠a alcanzar el valor de ``p``.

$(aside(tip(md"``d``: N√∫mero de unidades no conformes de la muestra.")))
"""

# ‚ïî‚ïê‚ï° bd53f4d6-0852-4d29-98a9-2005e42d4692
# Ejemplo intro
md"""
!!! note "Ejemplo: ¬øD√≥nde est√°n las unidades no conformes?"
	
_N_ = $(@bind N_intro Slider(100:1:500, default=150, show_value=true)) | N√∫m. de unidades no conformes = $(@bind d_intro Slider(0:60, show_value=true))

_n_ = $(@bind n_intro Slider(100:1:500, default=150, show_value=true))

Mostrar $(@bind mostrar_intro Select(["lote", "muestra", "unidades defectuosas"]))
"""

# ‚ïî‚ïê‚ï° 082e6af1-0db1-40c6-9447-d44daea34c61
begin
	function reemplaza(string, posiciones, emoticono)
		array = collect(string)
		for i in posiciones
			array[i] = emoticono
		end
		join(array)
	end
	
	lote_intro = crear_lote(d_intro, N_intro)
	muest_intro = hacer_muestreo(n_intro, lote_intro, false)
	base_intro = "ü•´"^N_intro
	defect_intro = reemplaza(base_intro, lote_intro.nc_pos, 'üí©')
	muestras_intro = reemplaza(base_intro, muest_intro.muestra_pos, 'üß™')
	p_intro = d_intro/N_intro

	if mostrar_intro == "lote"
		show_intro = base_intro
	elseif mostrar_intro == "muestra"
		show_intro = muestras_intro
	elseif mostrar_intro == "unidades defectuosas"
		show_intro = defect_intro
	else
		show_intro = "Error al mostrar el lote. Fallo en el 'Select'"
	end
	
	cm"""
	 $(show_intro)

	 ``p`` = $(round(p_intro; digits=3)) | ``d/n``= $(round(muest_intro.d/n_intro; digits=3))
	"""
end

# ‚ïî‚ïê‚ï° c906f8a9-1752-443c-a157-223456258ce9
cm"""
Idealmente ``p`` y ``d/n`` deber√≠an ser iguales, pero comprobamos que no siempre es as√≠. Solamente ocurre cuanto el tama√±o de muestra es muy elevado. El problema es que un tama√±o de muestra muy elevado, los costes debidos al muestreo se hacen muy altos.

Es necesario que estudiemos el problema con m√°s detalle para encontrar un valor de ``n`` que nos permita unos resultados con unas garant√≠as aceptables pero que no disparen los costes.
"""

# ‚ïî‚ïê‚ï° 9da2825d-66ff-4768-b3b0-1c865f53ba06
md"""
---
"""

# ‚ïî‚ïê‚ï° 10a95832-912a-4b4e-b165-41efd7cd6e61
PlutoUI.TableOfContents()

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄa5587c32-709e-11ed-3047-b79d7fc586b9
# ‚ïü‚îÄcd5cf515-29c9-43e5-a08e-5a3334815c3c
# ‚ïü‚îÄd88d73c0-bcb3-4b2b-a7df-57ca598dff48
# ‚ïü‚îÄ2779ed47-513e-4715-8d9e-754d3fee3df3
# ‚ïü‚îÄ4d7f301d-bb49-4526-b76d-10c2b7ce7ee4
# ‚ïü‚îÄbd53f4d6-0852-4d29-98a9-2005e42d4692
# ‚ïü‚îÄ082e6af1-0db1-40c6-9447-d44daea34c61
# ‚ïü‚îÄc906f8a9-1752-443c-a157-223456258ce9
# ‚ïü‚îÄ9da2825d-66ff-4768-b3b0-1c865f53ba06
# ‚ï†‚ïêe940f120-fbe8-481b-ba90-17d5af80fa07
# ‚ï†‚ïê10a95832-912a-4b4e-b165-41efd7cd6e61
